<?php

{% for name, field in config_class.fields %}
    /**
     * Set the "{{ name }}" field.
     *
     * @param mixed $value The value.
     *
     * @return \{{ class }} The document (fluent interface).
     */
    public function set{{ name|ucfirst }}($value)
    {
        if (!isset($this->data['fields']['{{ name }}'])) {
{% if config_class.isEmbedded %}
            if (($this->_root) && !$this->_root->isNew()) {
{% else %}
            if (!$this->isNew()) {
{% endif %}
                $this->get{{ name | ucfirst }}();
                if ($this->isFieldEqualTo('{{ name }}', $value)) {
                    return $this;
                }
            } else {
                if (null === $value) {
                    return $this;
                }
                $this->fieldsModified['{{ name }}'] = null;
                $this->data['fields']['{{ name }}'] = $value;
                return $this;
            }
        } elseif ($this->isFieldEqualTo('{{ name }}', $value)) {
            return $this;
        }

        if (!isset($this->fieldsModified['{{ name }}']) && !array_key_exists('{{ name }}', $this->fieldsModified)) {
            $this->fieldsModified['{{ name }}'] = $this->data['fields']['{{ name }}'];
        } elseif ($this->isFieldModifiedEqualTo('{{ name }}', $value)) {
            unset($this->fieldsModified['{{ name }}']);
        }

        $this->data['fields']['{{ name }}'] = $value;

        return $this;
    }

    /**
     * Returns the "{{ name }}" field.
     *
     * @return mixed The $name field.
     */
    public function get{{ name|ucfirst }}()
    {
        if (!isset($this->data['fields']['{{ name }}'])) {
{% if config_class.isEmbedded %}
            if (
                (!isset($this->data['fields']) || !array_key_exists('{{ name }}', $this->data['fields']))
                &&
                ($this->_root)
                &&
                !$this->isEmbeddedOneChangedInParent()
                &&
                !$this->isEmbeddedManyNew()
            ) {
                $field = $this->_path . '.{{ field.dbName }}';

                /* TODO
                 * 
                 * Suboptimal workaround to query cache bug with EmbeddedGroup:
                 * only add path until the first numeric element, but not that element.
                 * 
                 * Example:
                 * 
                 * If path is "comments.1.infos", only "comments" is added to the cache.
                 * 
                 * A better solution is to mark EmbeddedGroups, so the Query class can use
                 * MongoDB's array projection operator to project document fields inside
                 * arrays.
                 */
                $path = [];
                foreach (explode('.', $field) as $e) {
                    if (is_numeric($e)) {
                        break;
                    }
                    $path[] = $e;
                }
                $path = implode('.', $path);

                $this->_root->addFieldCache($path);

                // TODO: a document should be able to return it's collection and connection shouldn't it?
                $repository = $this->getMandango()->getRepository(get_class($this->_root));
                $collection = $repository->getCollection();
                $data = $collection->findOne(
                    [ '_id' => $this->_root->getId() ],
                    [
                        'projection' => [$field => 1],
                        'session' => $repository->getSession()
                    ]
                );
                foreach (explode('.', $field) as $key) {
                    if (!isset($data[$key])) {
                        $data = null;
                        break;
                    }
                    $data = $data[$key];
                }
                if (null !== $data) {
                    {{ mandango_type_to_php(field.type, "$data", "$this->data['fields']['" ~ name ~ "']") }}
                }
            }
            if (!isset($this->data['fields']['{{ name }}'])) {
                $this->data['fields']['{{ name }}'] = null;
            }
{% else %}
            if ($this->isNew()) {
                $this->data['fields']['{{ name }}'] = null;
            } elseif (!isset($this->data['fields']) || !array_key_exists('{{ name }}', $this->data['fields'])) {
                $this->addFieldCache('{{ field.dbName }}');
                $data = $this->getRepository()->getCollection()->findOne(
                    ['_id' => $this->getId()],
                    [
                        'projection' => ['{{ field.dbName }}' => 1],
                        'session' => $this->getRepository()->getSession()
                    ]
                );
                if (isset($data['{{ field.dbName }}'])) {
                    {{ mandango_type_to_php(field.type, "$data['" ~ field.dbName ~ "']", "$this->data['fields']['" ~ name ~ "']") }}
                } else {
                    $this->data['fields']['{{ name }}'] = null;
                }
            }
{% endif %}
        }

        return $this->data['fields']['{{ name }}'];
    }
{% endfor %}

    private function isFieldEqualTo($field, $otherValue)
    {
        $value = $this->data['fields'][$field];

        return $this->isFieldValueEqualTo($value, $otherValue);
    }

    private function isFieldModifiedEqualTo($field, $otherValue)
    {
        $value = $this->fieldsModified[$field];

        return $this->isFieldValueEqualTo($value, $otherValue);
    }

    protected function isFieldValueEqualTo($value, $otherValue)
    {
        if (is_object($value)) {
            return $value == $otherValue;
        }

        return $value === $otherValue;
    }
